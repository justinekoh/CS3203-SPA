name: Continuous Integration

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  MacOS-build-test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      fail-fast: true

    env:
      TEST_DIR: ./Tests14
      AUTOTESTER_PATH: ./Code14/build/src/autotester/autotester
      OUTPUT_PATH: ./Tests14/out.xml
      NULL_DEVICE: /dev/null

    steps:
      - uses: actions/checkout@v3

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14
        # Build your program with the given configuration
        run: cmake --build ./build --config ${{env.BUILD_TYPE}}

      - name: Unit Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./build/src/unit_testing/unit_testing

      - name: Integration Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ./build/src/integration_testing/integration_testing

      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: System Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14
        run: python -u ./Tests14/autotester.py

  Windows-build-test:
    runs-on: windows-latest
    timeout-minutes: 20
    strategy:
      fail-fast: true

    env:
      TEST_DIR: ./Tests14
      AUTOTESTER_PATH: ./Code14/build/src/autotester/Release/autotester.exe
      OUTPUT_PATH: ./Tests14/out.xml
      NULL_DEVICE: nul

    steps:
      - uses: actions/checkout@v3
        with:
          architecture: 'x64'

      - name: Preparation
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14
        run: mkdir build

      - name: Configure CMake
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14/build
        run: cmake -A x64 ..

      - name: Build
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14/build
        run: |
          cmake --build . --target unit_testing --config ${{env.BUILD_TYPE}}
          cmake --build . --target integration_testing --config ${{env.BUILD_TYPE}}
          cmake --build . --target autotester --config ${{env.BUILD_TYPE}}

      - name: Unit Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14/build
        run: ./src/unit_testing/Release/unit_testing.exe

      - name: Integration Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14/Code14/build
        run: ./src/integration_testing/Release/integration_testing.exe

      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: System Testing
        shell: bash
        working-directory: ${{github.workspace}}/Team14
        run: python -u ./Tests14/autotester.py

  Generate-coverage:
    runs-on: macos-latest
    needs: MacOS-build-test  # This ensures that the code coverage job runs after the build job.
    steps:
      - uses: actions/checkout@v3

      - name: Install lcov
        run: |
          brew update
          brew install lcov
        shell: bash

      - name: Generate coverage report
        run: |
          lcov --directory ./Team14/Code14/build/src/spa --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' --output-file coverage.info
          genhtml coverage.info --output-directory coverage
        working-directory: ${{github.workspace}}
